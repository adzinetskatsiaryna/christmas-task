{"version":3,"sources":["components/startPage.tsx","api/api.ts","redux/utils.ts","redux/toysReducer.ts","components/filtredToys.tsx","components/multiRangeSlider.tsx","components/popup.tsx","assets/svg/search.svg","components/searchInput.tsx","components/selectorToys.tsx","components/toysPage.tsx","components/christmasTreePage.tsx","components/routs.tsx","components/header.tsx","components/footer.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["StartPage","className","to","TOYS_PATH","instance","axios","create","baseURL","api","get","filterObj","array","filters","keys","Object","filter","key","hasOwnProperty","x","elem","reduce","flag","includes","serch","t","name","toLowerCase","initialState","selectedArr","filtredArr","count","toys","ToysReducer","state","action","type","filteredArr","filtres","selectedToy","newArr","isSelected","find","num","isSelect","map","FiltredToys","props","forms","el","i","isClicked","path","onClick","form","filterForm","colors","value","color","onChange","e","filterColor","currentTarget","checked","onChangeColor","isChecked","sizes","size","filterSize","isLike","filterFavorite","MultiRangeSlider","min","max","useState","minVal","setMinVal","maxVal","setMaxVal","minValRef","useRef","maxValRef","range","getPercent","useCallback","Math","round","useEffect","current","minPercent","maxPercent","style","left","width","ref","event","target","toString","classnames","Popup","handleClose","content","SearchInput","setValue","toLocaleLowerCase","trim","searchToys","placeholder","src","search","alt","SortToys","onChangeSortType","ToysPage","year","shape","favorite","setFiltres","dispatch","useDispatch","useSelector","store","filtredArrFromRedux","then","res","data","catch","error","console","log","setFiltredArr","setIsLike","setSizes","setForms","setColors","forEach","length","setFiltresArrAC","filterCount","counts","push","prevState","filterYear","setFilter","isOpen","setIsOpen","isActive","setIsActive","changeFilter","isLik","mapNewForms","s","mapNewColors","c","mapNewSizes","mapArrSizes","mapArrColors","mapArrForms","sort","a","b","setSelectedTuysAC","TreePage","START_PATH","TREE_PATH","Routs","exact","render","Header","Footer","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54573b44.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { TOYS_PATH } from \"./routs\";\r\nimport \"./start.css\"\r\n\r\nconst StartPage = ()=>{\r\n   \r\n   return (\r\n        <div className=\"start-wrapper\">\r\n           <div className=\"start-container\">\r\n               <h2 className=\"start-title\">Помогите бабушке нарядить елку</h2>\r\n               \r\n                  <NavLink to={TOYS_PATH} className=\"start-link\">Начать</NavLink>\r\n                  \r\n           </div>         \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default StartPage","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL:'https://raw.githubusercontent.com/adzinetskatsiaryna/christmas-data/main/data.json'\r\n});\r\n\r\n\r\nexport const api = {\r\n    getToys(){\r\n        return instance.get(``)\r\n    }\r\n}","import { filtersType } from \"../components/toysPage\";\r\nimport { ToyType } from \"./toysReducer\";\r\n\r\nexport function filterObj(array:Array<ToyType> = [], filters: filtersType = {}) {\r\n    const keys = Object.keys(filters).filter(key => filters.hasOwnProperty(key));\r\n    let x = array.filter(elem => {\r\n        \r\n        const commonKeys = keys.filter(key => elem.hasOwnProperty(key));\r\n        return  commonKeys.reduce((flag, key) => !!(flag && filters[key as keyof filtersType]?.includes(elem[key as keyof ToyType]as never)), true as boolean);\r\n    })\r\n    if(filters.serch){\r\n      x= x.filter(t=>t.name.toLowerCase().includes(filters.serch as string))\r\n    }\r\n    return x\r\n}","import { type } from \"os\";\r\nimport { Dispatch } from \"redux\";\r\nimport { api } from \"../api/api\";\r\nimport { filtersType } from \"../components/toysPage\";\r\nimport { filterObj } from \"./utils\";\r\n\r\nexport type ToyType = {\r\n    num: string\r\n    name: string\r\n    count: string\r\n    year: string\r\n    shape: string\r\n    color: string\r\n    size: string\r\n    favorite: boolean\r\n    isSelect: boolean\r\n}\r\n\r\nexport type InitialState = {\r\n  selectedArr: Array<ToyType> ,\r\n  filtredArr : Array<ToyType>,\r\n  count: number | null\r\n  toys : Array<ToyType>\r\n}\r\n\r\n \r\n\r\nconst initialState: InitialState = {\r\n  selectedArr: [],\r\n  filtredArr :[],\r\n  count: null,\r\n  toys: []\r\n \r\n}\r\n\r\n\r\nconst ToysReducer = (state: InitialState = initialState, action: ActionType): InitialState =>{\r\n   switch (action.type) {\r\n     \r\n     case 'SET_TOYS' : \r\n     return {\r\n       ...state,\r\n       toys: action.toys\r\n     };\r\n\r\n    case 'SET_FILTERED_ARR':\r\n      return {\r\n      ...state,\r\n      filtredArr:action.filteredArr\r\n               \r\n    };\r\n\r\n    case 'SET_FILTERS_ARR':\r\n      return {\r\n         ...state,\r\n          filtredArr: filterObj(state.toys, action.filtres)\r\n      };\r\n      case 'RESET_SETTINGS':\r\n        return {\r\n           ...state,\r\n            filtredArr: state.toys\r\n        };\r\n\r\n    case 'ADD_DELETE_SELECTED_TOYS':\r\n      \r\n      let selectedToy: ToyType | undefined\r\n      let newArr: Array<ToyType> = []\r\n      if(action.isSelected){\r\n        selectedToy = state.filtredArr.find(t=>t.num===action.num)\r\n        if(selectedToy){\r\n          newArr = [...state.selectedArr, {...selectedToy, isSelect: action.isSelected}]\r\n        }\r\n        \r\n      }\r\n      if(!action.isSelected){ newArr = [...state.selectedArr.filter(t=>t.num!==action.num)]}\r\n      return {\r\n        ...state,\r\n        selectedArr: newArr, \r\n        filtredArr: [...state.filtredArr.map(t=>{\r\n          if(t.num!==action.num){\r\n            return {...t}\r\n          } return {...t, isSelect: action.isSelected}\r\n        })]    \r\n      };  \r\n       default: return state\r\n   }\r\n   \r\n};\r\n\r\nexport const setSelectedTuysAC = (num:string, isSelected: boolean)=>(\r\n  {\r\n    type: 'ADD_DELETE_SELECTED_TOYS',\r\n    num, \r\n    isSelected\r\n  } as const\r\n)\r\nexport const setToysAC = (toys: Array<ToyType>)=>(\r\n  {\r\n      type: 'SET_TOYS',\r\n      toys\r\n  } as const\r\n)\r\nexport const setFilteredArrAC = ( filteredArr: Array<ToyType>)=>(\r\n  {\r\n      type: 'SET_FILTERED_ARR',\r\n      filteredArr\r\n  } as const\r\n)\r\n\r\nexport const setFiltresArrAC = (filtres:filtersType)=>(\r\n  {\r\n      type: 'SET_FILTERS_ARR',\r\n      filtres\r\n  } as const\r\n)\r\nexport const resetSettingsAC = ()=>(\r\n  {\r\n      type: 'RESET_SETTINGS',\r\n  } as const\r\n)\r\n\r\ntype ActionType = \r\n| ReturnType<typeof setFiltresArrAC>\r\n| ReturnType<typeof resetSettingsAC>\r\n| ReturnType<typeof setFilteredArrAC>\r\n| ReturnType<typeof setToysAC>\r\n| ReturnType<typeof setSelectedTuysAC>\r\n\r\n\r\nexport const getToys = () => (dispatch: Dispatch) => {\r\n  api.getToys()\r\n      .then(res => {\r\n          dispatch(setToysAC(res.data.toys));\r\n          dispatch(setFilteredArrAC(res.data.toys))\r\n          \r\n      }).catch(error => {\r\n      console.log(error)\r\n  })\r\n};\r\n\r\nexport default ToysReducer","import React, {useState, ChangeEvent} from \"react\";\r\nimport './filtredToys.css'\r\n\r\n\r\nexport type colorType = {\r\n    color: string\r\n    isChecked: boolean\r\n    name: string\r\n}\r\nexport type colorsType = Array<colorType>\r\n\r\nexport type sizeType = {\r\n    size: string\r\n    isClicked: boolean\r\n    path: any\r\n    name: string\r\n}\r\nexport type sizesType = Array<sizeType>\r\n\r\nexport type formType = {\r\n    form: string\r\n    isClicked: boolean \r\n    path: any\r\n    name: string\r\n}\r\nexport type formsType = Array<formType>\r\n\r\nexport type PropsType={\r\n    changeFilter: (color?: string, form?: string, size?: string, isLike?: boolean)=>void\r\n    filterForm: (form:string, isClicked: boolean)=>void\r\n    filterColor: (color: string, isChecked:boolean)=>void\r\n    filterSize: (size: string, isClicked:boolean)=>void\r\n    filterFavorite:(favorite:boolean)=>void\r\n    sizes: Array<sizeType>\r\n    forms: Array<formType>\r\n    colors: Array<colorType>\r\n    isLike: boolean\r\n}\r\n\r\nconst FiltredToys = (props:PropsType)=>{\r\n\r\n    const onChangeColor = (e: ChangeEvent<HTMLInputElement>, color:string)=>{\r\n        props.filterColor(color, e.currentTarget.checked)\r\n    };\r\n\r\n    const onChangeForm = (form:string, isClicked: boolean)=>{\r\n        props.filterForm(form, isClicked)    \r\n    };\r\n\r\n    const onChangeSize = (size:string, isClicked: boolean)=>{\r\n        props.filterSize(size, isClicked)\r\n    };\r\n\r\n    const onChangeLike = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.filterFavorite(e.currentTarget.checked)\r\n    }\r\n\r\n   return (\r\n        <div className=\"value-filtres-container\">\r\n           <h2>Фильтры по назначению</h2>\r\n           <div>\r\n                <p>Форма</p>\r\n                <ul className=\"values-filter\">\r\n                   {props.forms.map((el,i)=>{\r\n                       return <li key={i} className={el.isClicked?el.path :el.name} onClick={()=>onChangeForm(el.form, !el.isClicked)} ></li>\r\n                   })}\r\n                </ul>\r\n           </div>\r\n           <div>\r\n                <p>Цвет</p>\r\n                <ul className=\"colors-filter\">\r\n                    {props.colors.map((el, i)=>{\r\n                        return  <li key={i}><input \r\n                        type=\"checkbox\" \r\n                        value={el.color} \r\n                        onChange={(e)=>onChangeColor(e, el.color)} \r\n                        checked={el.isChecked} \r\n                        className={el.name} /></li>\r\n                    })}\r\n                </ul>\r\n           </div>\r\n           <div>\r\n                <p>Размер</p>\r\n                <ul className=\"sizes-filter\">\r\n                    {props.sizes.map((el, i)=>{\r\n                        return <li key={i} onClick={()=>onChangeSize(el.size, !el.isClicked)}  className={el.isClicked? el.path : el.name}></li>\r\n                    })}\r\n                </ul>\r\n           </div>\r\n           <div className=\"favorite-filter\">\r\n               <span>Только любимые</span>\r\n               <input type=\"checkbox\" checked={props.isLike} onChange={onChangeLike} />\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FiltredToys","import {\r\n    ChangeEvent,\r\n    FC,\r\n    useCallback,\r\n    useEffect,\r\n    useState,\r\n    useRef\r\n  } from \"react\";\r\n  import classnames from \"classnames\";\r\n  import \"./multiRangeSlider.css\";\r\n  \r\n  interface MultiRangeSliderProps {\r\n    min: number;\r\n    max: number;\r\n    onChange: Function;\r\n  }\r\n  \r\n  const MultiRangeSlider: FC<MultiRangeSliderProps> = ({\r\n    min,\r\n    max,\r\n    onChange\r\n  }) => {\r\n    const [minVal, setMinVal] = useState(min);\r\n    const [maxVal, setMaxVal] = useState(max);\r\n    const minValRef = useRef<HTMLInputElement>(null);\r\n    const maxValRef = useRef<HTMLInputElement>(null);\r\n    const range = useRef<HTMLDivElement>(null);\r\n  \r\n    // Convert to percentage\r\n    const getPercent = useCallback(\r\n      (value: number) => Math.round(((value - min) / (max - min)) * 100),\r\n      [min, max]\r\n    );\r\n  \r\n    // Set width of the range to decrease from the left side\r\n    useEffect(() => {\r\n      if (maxValRef.current) {\r\n        const minPercent = getPercent(minVal);\r\n        const maxPercent = getPercent(+maxValRef.current.value); // Precede with '+' to convert the value from type string to type number\r\n  \r\n        if (range.current) {\r\n          range.current.style.left = `${minPercent}%`;\r\n          range.current.style.width = `${maxPercent - minPercent}%`;\r\n        }\r\n      }\r\n    }, [minVal, getPercent]);\r\n  \r\n    // Set width of the range to decrease from the right side\r\n    useEffect(() => {\r\n      if (minValRef.current) {\r\n        const minPercent = getPercent(+minValRef.current.value);\r\n        const maxPercent = getPercent(maxVal);\r\n  \r\n        if (range.current) {\r\n          range.current.style.width = `${maxPercent - minPercent}%`;\r\n        }\r\n      }\r\n    }, [maxVal, getPercent]);\r\n  \r\n    // Get min and max values when their state changes\r\n    useEffect(() => {\r\n      onChange({ min: minVal, max: maxVal });\r\n    }, [minVal, maxVal, onChange]);\r\n  \r\n    return (\r\n      <div className=\"container\">\r\n        <input\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          value={minVal}\r\n          ref={minValRef}\r\n          onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n            const value = Math.min(+event.target.value, maxVal - 1);\r\n            setMinVal(value);\r\n            event.target.value = value.toString();\r\n          }}\r\n          className={classnames(\"thumb thumb--zindex-3\", {\r\n            \"thumb--zindex-5\": minVal > max - 100\r\n          })}\r\n        />\r\n        <input\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          value={maxVal}\r\n          ref={maxValRef}\r\n          onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n            const value = Math.max(+event.target.value, minVal + 1);\r\n            setMaxVal(value);\r\n            event.target.value = value.toString();\r\n          }}\r\n          className=\"thumb thumb--zindex-4\"\r\n        />\r\n  \r\n        <div className=\"slider\">\r\n          <div className=\"slider__track\"></div>\r\n          <div ref={range} className=\"slider__range\"></div>\r\n          <div className=\"slider__left-value\">{minVal}</div>\r\n          <div className=\"slider__right-value\">{maxVal}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default MultiRangeSlider;","\r\nimport \"./popup.css\";\r\n\r\nexport type PropsType={\r\n    handleClose: ()=>void\r\n    content: any\r\n}\r\n\r\nconst Popup = (props:PropsType) => {\r\n  return (\r\n    <div className=\"popup-box\">\r\n      <div className=\"box\">\r\n        <span className=\"close-icon\" onClick={props.handleClose}>x</span>\r\n        {props.content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Popup;","export default __webpack_public_path__ + \"static/media/search.34d5c2d6.svg\";","import { useState } from \"react\";\r\nimport search from '../assets/svg/search.svg'\r\nimport './searchinput.css'\r\n\r\ntype PopsType ={\r\n    searchToys: (value: string)=>void\r\n}\r\n\r\nconst SearchInput = (props:PopsType) => {\r\n    const [value, setValue]=useState('')\r\n    const onChangeValue =(e:any)=>{\r\n        setValue((e.target.value).toLocaleLowerCase().trim())\r\n        props.searchToys((e.target.value).toLowerCase().trim())\r\n    }\r\n\r\n    const cliearSearchInput =()=>{\r\n        setValue('')\r\n        props.searchToys('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n              <input type=\"text\" value={value} onChange={onChangeValue}  placeholder=\"Введите запрос\" className=\"search-field\"/> \r\n              <img src={search} alt=\"search-icon\" className=\"search-icon\" /> \r\n              <span className=\"search-close\" onClick={cliearSearchInput}>x</span>                    \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchInput","import { useState } from \"react\";\r\nimport \"./selectorToys.css\"\r\n\r\nconst SortToys = (props: any) => {\r\n    const [value, setValue]=useState('от А до Я')\r\n    const onChangeValue = (e: any)=>{\r\n        \r\n        setValue(e.target.value)\r\n        props.onChangeSortType(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"select-wrapper\"> \r\n           <select value={value} onChange={onChangeValue} className=\"select-css\">\r\n               <option value='Сортировать'>Выберите способ сортировки</option>\r\n                <option value=\"От А до Я\">От А до Я</option>\r\n                <option value=\"От Я до А\">От Я до А</option>\r\n                <option value=\"по возростанию\">по возростанию</option>\r\n                <option value=\"по убыванию\">по убыванию</option>\r\n            </select>\r\n           <div className=\"select-arrov\"></div>                      \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SortToys","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { ReducerAppType } from \"../redux/store\";\r\nimport { getToys, ToyType, setFiltresArrAC, setSelectedTuysAC} from \"../redux/toysReducer\";\r\nimport FiltredToys, { colorType, formType, sizesType } from \"./filtredToys\";\r\nimport MultiRangeSlider from \"./multiRangeSlider\";\r\nimport Popup from \"./popup\";\r\nimport SearchInput from \"./searchInput\";\r\nimport SortToys from \"./selectorToys\";\r\nimport './toysPage.css'\r\n\r\n\r\nexport type filtersType = {\r\n   count?: Array<string>\r\n   year?: Array<string>,\r\n   shape?: Array<string>,\r\n   color?: Array<string>,\r\n   size?: Array<string>,\r\n   favorite?: Array<boolean>,\r\n   serch?: string\r\n}\r\n\r\nconst ToysPage = ()=>{\r\n  \r\n   const[filtres, setFiltres]= useState<filtersType>({\r\n      count: [],\r\n      year: [],\r\n      shape: [],\r\n      color: [],\r\n      size: [],\r\n      favorite: [],\r\n      serch: ''\r\n   })\r\n   const dispatch = useDispatch();\r\n   \r\n\r\n    const toys = useSelector<ReducerAppType,  Array<ToyType>>((store) => store.toys.toys);\r\n    const count = useSelector<ReducerAppType,  number | null>((store) => store.toys.count);\r\n    let filtredArrFromRedux = useSelector<ReducerAppType,  Array<ToyType>>((store) => store.toys.filtredArr);\r\n    const selectedArr = useSelector<ReducerAppType,  Array<ToyType>>((store) => store.toys.selectedArr);\r\n\r\n    useEffect(() => {\r\n      dispatch(getToys()) \r\n      \r\n    }, []);\r\n   \r\n\r\n    const [filtredArr, setFiltredArr] = useState<Array<ToyType>>([])\r\n    useEffect(()=>{\r\n      setFiltredArr(filtredArrFromRedux)\r\n    }, [filtredArrFromRedux])\r\n\r\n\r\n   const changeFilter = (color?: string, form?: string, size?: string, isLik?: boolean) => {\r\n\r\n   }\r\n\r\n   const [isLike, setIsLike] = useState(false)\r\n\r\n   const filterFavorite = (favorite:boolean)=>{\r\n      setIsLike(favorite)\r\n      if(favorite){\r\n         setFiltres((prevState)=>{\r\n            return {\r\n               ...prevState,            \r\n               favorite: [...(prevState.favorite? prevState.favorite : []), favorite]\r\n            }\r\n         })\r\n      }else{\r\n         setFiltres((prevState)=>{\r\n            return {\r\n               ...prevState,\r\n               \r\n               favorite: []\r\n            }\r\n         })\r\n      }      \r\n   }\r\n\r\n   const [sizes, setSizes] = useState([\r\n      {size: 'большой', isClicked: false, path: 'big-clicked', name: 'big'}, \r\n      {size: 'средний', isClicked: false, path: 'medium-clicked', name: 'medium'}, \r\n      {size:'малый', isClicked: false, path: 'small-clicked', name: 'small'}, \r\n      \r\n  ])\r\n\r\n   const filterSize = (size:string, isClicked:boolean)=>{\r\n      const mapNewSizes = sizes.map( (el) => el.size === size ? {...el, isClicked: isClicked} : el  )\r\n      setSizes(mapNewSizes)\r\n      if(isClicked){\r\n         setFiltres((prevState)=>{\r\n            return {\r\n               ...prevState,               \r\n               size: [...(prevState.size? prevState.size : []), size]\r\n            }\r\n         })\r\n      }else{\r\n         setFiltres((prevState)=>{\r\n            return {\r\n               ...prevState,            \r\n               size: prevState.size?.filter(s=>s!==size)\r\n            }\r\n         })\r\n      }      \r\n   }\r\n\r\n\r\n   const [forms, setForms] = useState <Array<formType>>(\r\n      [\r\n      { form:'шар', isClicked: false, path: 'ball-clicked', name: 'ball'}, \r\n      { form: 'колокольчик', isClicked: false, path: 'bell-clicked', name: 'bell'}, \r\n      { form:'шишка', isClicked: false, path: 'cone-clicked', name: 'cone'}, \r\n      { form: 'снежинка', isClicked: false, path: 'snowflake-clicked', name: 'snowflake'}, \r\n      { form: 'фигурка', isClicked: false, path: 'figure-clicked', name: 'figure'}\r\n  ])\r\n  \r\n   const filterForm = (form:string, isClicked: boolean)=>{\r\n      const mapNewForms = forms.map( (el) => el.form === form ? {...el, isClicked: isClicked} : el  )\r\n      setForms(mapNewForms)\r\n      forms.filter(e=>e.isClicked!==true)     \r\n      if(isClicked){\r\n         setFiltres((prevState)=>{\r\n            return {\r\n               ...prevState,            \r\n               shape: [...(prevState.shape? prevState.shape : []), form]\r\n            }\r\n         })\r\n      }else{\r\n         setFiltres((prevState)=>{\r\n            return{\r\n               ...prevState,            \r\n               shape: prevState.shape?.filter(s=>s!==form)\r\n            }\r\n         })\r\n      }        \r\n   }\r\n\r\n\r\n      const [colors, setColors] = useState<Array<colorType>>([\r\n      {color:'красный',isChecked: false, name: 'red'}, \r\n      {color: 'белый', isChecked: false, name: 'white'}, \r\n      {color:'желтый', isChecked: false, name: 'yellow'}, \r\n      {color: 'синий', isChecked: false, name: 'blue'}, \r\n      {color: 'зелёный', isChecked: false, name: 'green'}\r\n   ])\r\n  \r\n  \r\n   const filterColor = (color: string, isChecked: boolean)=>{\r\n      const mapNewColors = colors.map((el) => el.color === color ? {...el, isChecked: isChecked} : el  )\r\n      setColors(mapNewColors)\r\n      if(isChecked){\r\n         setFiltres((prevState)=>{         \r\n            return {\r\n               ...prevState,               \r\n               color: [...(prevState.color? prevState.color : []), color]\r\n            }           \r\n         })   \r\n      }else{\r\n         setFiltres((prevState)=>{           \r\n            return {\r\n               ...prevState,               \r\n               color: prevState.color?.filter(c=>c!==color)\r\n            }\r\n         })\r\n      }      \r\n   }\r\n\r\n   useEffect(()=>{\r\n      let data: filtersType = {}\r\n      Object.keys(filtres).forEach((key)=>{\r\n         let x: keyof filtersType = key as keyof filtersType\r\n         if(filtres && filtres[x]?.length !==0){           \r\n         data[x]=filtres[x] as Array <string & boolean> & string            \r\n         }\r\n      }) \r\n      data.serch=filtres.serch  \r\n      dispatch(setFiltresArrAC(data))\r\n      \r\n   }, [filtres])\r\n\r\n   const filterCount = useCallback(({ min, max }: { min: number; max: number })=>{\r\n      const counts = [] as string[];\r\n      for (let i = min; i <= max; i++){\r\n         counts.push(`${i}`);\r\n      }\r\n      setFiltres((prevState)=>{\r\n         return {\r\n            ...prevState,            \r\n            count: [...counts]\r\n         }\r\n      })\r\n   }, [])\r\n\r\n   const filterYear = useCallback(({ min, max }: { min: number; max: number })=>{\r\n      const counts = [] as string[];\r\n      for (let i = min; i <= max; i++){\r\n         counts.push(`${i}`);\r\n      }\r\n      setFiltres((prevState)=>{\r\n         return {\r\n            ...prevState,            \r\n            year: [...counts]\r\n         }\r\n      })\r\n   }, [])\r\n\r\n   const setSelectedToys=(num:string, isSelected: boolean)=>{\r\n      if(selectedArr.length < 20 || !isSelected){\r\n         dispatch(setSelectedTuysAC(num, isSelected)) \r\n      } else{\r\n         setIsOpen(true);\r\n      }\r\n           \r\n   }\r\n\r\n  \r\n   const resetSettings =()=>{\r\n      setFiltres({})\r\n      let mapArrSizes = sizes.map( (el) => ({...el, isClicked: false}))\r\n      setSizes(mapArrSizes)\r\n      let mapArrColors = colors.map((el)=>({...el, isChecked: false}))\r\n      setColors(mapArrColors)\r\n      let mapArrForms = forms.map((el)=>({...el, isClicked: false}))\r\n      setForms(mapArrForms)\r\n      setIsLike(false)\r\n      // dispatch(resetSettingsAC())   \r\n   }\r\n   const searchToys =(value: string)=>{\r\n      setFiltres({...filtres, serch: value})\r\n   }\r\n\r\n   const [filter, setFilter]=useState('')\r\n\r\n   const onChangeSortType=(value:string)=>{\r\n     setFilter(value)   \r\n   } \r\n\r\n   const [isOpen, setIsOpen]= useState(false)\r\n   const [isActive, setIsActive] = useState(false)\r\n   \r\n   \r\n   useEffect(()=>{\r\n      if(filtredArr.length===0 && toys.length!==0){\r\n         setIsActive(true)\r\n      }else{\r\n         setIsActive(false)\r\n      }\r\n\r\n   },[filtredArr])\r\n\r\n   const closeSecondPopup=()=>{\r\n      setIsActive(false)\r\n   }\r\n\r\n const closePopup = ()=>{\r\n     setIsOpen(false)\r\n }\r\n\r\n   return (\r\n      <div className=\"toys-page-wrapper\">\r\n         <div className=\"toys-page-container\">\r\n            <div className=\"filtres-container\">\r\n            <FiltredToys \r\n               changeFilter = {changeFilter}  \r\n               filterForm = {filterForm} \r\n               filterColor ={filterColor} \r\n               filterSize={filterSize} \r\n               filterFavorite={filterFavorite}\r\n               sizes = {sizes} \r\n               forms = {forms}\r\n               colors={colors}\r\n               isLike={isLike}\r\n            />\r\n           \r\n            <div className=\"toys-page-option\">\r\n               <h2>Фильтры по диапазону</h2> \r\n               <div className=\"countFilter\">    \r\n                  <p>Количество экземпляров:</p>  \r\n                  <MultiRangeSlider min={1} max={12} onChange={filterCount} /> \r\n               </div>\r\n               <div className=\"yersFilter\">          \r\n                  <p>Год приобретения:</p>  \r\n                  <MultiRangeSlider min={1940} max={2020} onChange={filterYear} /> \r\n               </div>\r\n            </div>\r\n            <div className=\"searchFilter\">\r\n             <h2>Сортировка</h2>\r\n              <SearchInput searchToys = {searchToys} />\r\n              <SortToys onChangeSortType = {onChangeSortType} />\r\n               <div>\r\n                  <button onClick={resetSettings} className=\"reset-button\">Сбросить фильтры</button>\r\n              </div>   \r\n            </div> \r\n            </div>\r\n            \r\n\r\n           <ul className=\"toys-container\">{filtredArr || filter ? filtredArr.sort((a: ToyType,b:ToyType)=>{\r\n              if(filter ==='От А до Я'){\r\n               if(a.name<b.name){\r\n                  return -1\r\n               }\r\n               if(a.name>b.name){\r\n                  return 1\r\n               }\r\n              }\r\n              if(filter=== 'От Я до А'){\r\n                 if(a.name>b.name){\r\n                    return -1\r\n                 }\r\n                 if(a.name<b.name){\r\n                    return 1\r\n                 }\r\n              }\r\n              if(filter==='по возростанию'){\r\n                  return +a.count - +b.count                \r\n              }\r\n              if(filter === 'по убыванию'){\r\n                 return +b.count - +a.count\r\n              }\r\n              return 0\r\n            \r\n           }).map((el, i)=>{            \r\n              return <li key={el.num} className=\"toys-card\" onClick={()=>setSelectedToys(el.num, !el.isSelect)}>\r\n                 <h2>{el.name}</h2>\r\n                 <div>\r\n                    \r\n                        <img src={`https://raw.githubusercontent.com/adzinetskatsiaryna/christmas-data/main/assets/toys/${el.num}.png`} alt={el.name} />\r\n   \r\n                    <ul className=\"toys-option\">\r\n                       <li><span>Колличество:</span><span> {el.count}</span></li>\r\n                       <li><span>Год выпуска:</span><span> {el.year}</span></li>\r\n                       <li><span>Форма:</span><span> {el.shape}</span></li>\r\n                       <li><span>Цвет:</span><span> {el.color}</span></li>\r\n                       <li><span>Размер:</span><span> {el.size}</span></li>\r\n                       <li><span>Любимая:</span><span> {el.favorite? ' да': ' нет'}</span></li>\r\n                       <li><button className={el.isSelect ?\"toys-card-button-select\": \"toys-card-button\"}>{el.isSelect ? 'Удалить из выбранных' : 'Добавить в выбранные'}</button></li>\r\n                    </ul>\r\n                 </div>\r\n              </li>\r\n           }): toys}</ul>\r\n         </div>\r\n         {isOpen&&<Popup content = {\"Извините, все слоты заполнены\"} handleClose={closePopup}/>}\r\n         {isActive&&<Popup content={\"Извините, совпадений не обнаружено\"} handleClose={closeSecondPopup}/>}      \r\n      </div>\r\n        \r\n    )\r\n};\r\n\r\nexport default ToysPage","import React from \"react\";\r\n\r\nconst TreePage = (props:any)=>{\r\n   \r\n   return (\r\n        <div>\r\n           <h2> Tree </h2>\r\n            \r\n        </div>\r\n    )\r\n};\r\nexport default TreePage","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport StartPage from \"./startPage\";\r\nimport ToysPage from \"./toysPage\";\r\nimport ThreePage from \"./christmasTreePage\";\r\nimport { HashRouter as Router } from \"react-router-dom\"\r\n\r\nexport const START_PATH = '/start';\r\nexport const TOYS_PATH = '/toys';\r\nexport const TREE_PATH = '/tree';\r\n\r\n\r\n\r\n\r\nconst Routs = ()=>{\r\n    return (\r\n        <div>\r\n            <Route exact path = {'/'} render={()=> <StartPage/>} />\r\n            <Route  path = {START_PATH} render={()=> <StartPage/>} />\r\n            <Route  path = {TOYS_PATH} render={()=> <ToysPage/>} />\r\n            <Route  path = {TREE_PATH} render={()=> <ThreePage/>} />\r\n        </div>\r\n    )\r\n}\r\nexport default Routs","\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {START_PATH, TOYS_PATH, TREE_PATH} from \"./routs\";\r\nimport './header.css'\r\nimport { useSelector } from \"react-redux\";\r\nimport { ReducerAppType } from \"../redux/store\";\r\nimport { ToyType } from \"../redux/toysReducer\";\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const selectedArr = useSelector<ReducerAppType,  Array<ToyType>>((store) => store.toys.selectedArr);\r\n   \r\n    return (\r\n        <div>\r\n            <div className=\"header-wrapper\"> \r\n                <div className='header-container'>\r\n                <div>\r\n                    <NavLink to={START_PATH}> <span className=\"logo\"></span></NavLink>\r\n                    <NavLink to={TOYS_PATH} className=\"toys-link\">ИГРУШКИ</NavLink> \r\n                    <NavLink to={TREE_PATH} className=\"tree-link\">ЕЛКИ</NavLink> \r\n                </div>    \r\n                <div className=\"count\">{selectedArr.length===0? '0' :selectedArr.length}</div>\r\n            </div>                       \r\n            </div>\r\n           \r\n        </div>\r\n        \r\n    )\r\n};\r\n\r\nexport default Header","import React from 'react';\r\nimport './footer.css'\r\n\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer>\r\n          <div className='footer-container'>\r\n              <span>Adzinets Katsiaryna</span>\r\n              <a href='https://github.com/adzinetskatsiaryna?tab=repositories'className='link-gh-pages' target=\"_blank\"></a>\r\n              <a href='https://rs.school/' className='link-rss' target=\"_blank\"></a>  \r\n          </div>\r\n        </footer>\r\n        \r\n    )\r\n};\r\n\r\nexport default Footer","import React from 'react';\nimport './App.css';\nimport { HashRouter } from 'react-router-dom';\nimport Header from './components/header';\nimport Routs from './components/routs';\nimport Footer from './components/footer';\nimport { HashRouter as Router } from \"react-router-dom\"\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n        <Router>\n            <Header/>\n            <Routs />     \n        </Router>\n        <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport ToysReducer from \"./toysReducer\";\r\nimport thunk from \"redux-thunk\";\r\n//import TreeReducer from \"./treeReducer\";\r\n\r\n\r\n\r\nconst reducer = combineReducers({\r\n    toys: ToysReducer,\r\n    // tree: TreeReducer,\r\n});\r\nexport type ReducerAppType = ReturnType<typeof reducer>\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}